// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rixtesttalendproject.lastfmimportembedded_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: LastFMimportembedded Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.3.0.r101800
 * @status 
 */
public class LastFMimportembedded implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "LastFMimportembedded";
	private final String projectName = "RIXTESTTALENDPROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						e.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					LastFMimportembedded.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(LastFMimportembedded.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tNeo4jConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jConnection_1", System.currentTimeMillis());

		status = "failure";

		tNeo4jConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jOutput_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jOutput_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jOutputRelationship_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jOutputRelationship_1", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jOutputRelationship_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jOutputRelationship_2", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jOutputRelationship_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jOutputRelationship_3", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_10", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jOutputRelationship_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jOutputRelationship_4", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_11", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_12", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jOutputRelationship_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jOutputRelationship_5", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_13", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_14", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jOutputRelationship_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jOutputRelationship_6", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_15", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUniqRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tUniqRow_8", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tLogRow_16", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jOutputRelationship_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jOutputRelationship_7", System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_9_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNeo4jClose_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tNeo4jClose_1", System.currentTimeMillis());

		status = "failure";

		tNeo4jClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tNeo4jConnection_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_9_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tNeo4jClose_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tNeo4jConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tNeo4jConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tNeo4jConnection_1 begin ] start
				 */

				ok_Hash.put("tNeo4jConnection_1", false);
				start_Hash
						.put("tNeo4jConnection_1", System.currentTimeMillis());
				currentComponent = "tNeo4jConnection_1";

				int tos_count_tNeo4jConnection_1 = 0;

				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jConnection_1 = new org.neo4j.kernel.EmbeddedGraphDatabase(
						"/Users/rvanbruggen/Cloud/Neo Technology/Demo/DEMO-1.9/data/graph.db");

				globalMap.put("dbService_tNeo4jConnection_1",
						databaseService_tNeo4jConnection_1);

				/**
				 * [tNeo4jConnection_1 begin ] stop
				 */
				/**
				 * [tNeo4jConnection_1 main ] start
				 */

				currentComponent = "tNeo4jConnection_1";

				tos_count_tNeo4jConnection_1++;

				/**
				 * [tNeo4jConnection_1 main ] stop
				 */
				/**
				 * [tNeo4jConnection_1 end ] start
				 */

				currentComponent = "tNeo4jConnection_1";

				ok_Hash.put("tNeo4jConnection_1", true);
				end_Hash.put("tNeo4jConnection_1", System.currentTimeMillis());

				/**
				 * [tNeo4jConnection_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tNeo4jConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tNeo4jConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row1Struct row2 = row1;

				/**
				 * [tNeo4jOutput_1 begin ] start
				 */

				ok_Hash.put("tNeo4jOutput_1", false);
				start_Hash.put("tNeo4jOutput_1", System.currentTimeMillis());
				currentComponent = "tNeo4jOutput_1";

				int tos_count_tNeo4jOutput_1 = 0;
				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jOutput_1 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				java.util.Map<String, org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>> indexNodeMap_tNeo4jOutput_1 = new java.util.HashMap<String, org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>>();

				org.neo4j.graphdb.index.AutoIndexer<org.neo4j.graphdb.Node> autoIndexer_tNeo4jOutput_1 = databaseService_tNeo4jOutput_1
						.index().getNodeAutoIndexer();
				autoIndexer_tNeo4jOutput_1.setEnabled(true);

				autoIndexer_tNeo4jOutput_1.startAutoIndexingProperty("name");

				autoIndexer_tNeo4jOutput_1.startAutoIndexingProperty("type");

				org.neo4j.graphdb.Transaction tx_tNeo4jOutput_1 = databaseService_tNeo4jOutput_1
						.beginTx();
				int nb_line_tNeo4jOutput_1 = 0;
				long counter_tNeo4jOutput_1 = 0;

				/**
				 * [tNeo4jOutput_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());
				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130704 last.fm nodes part 1.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130704 last.fm nodes part 1.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.name = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.type = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							row2 = row1;

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tNeo4jOutput_1 main ] start
							 */

							currentComponent = "tNeo4jOutput_1";

							org.neo4j.graphdb.Node node_tNeo4jOutput_1 = databaseService_tNeo4jOutput_1
									.createNode();

							if (row2.name != null) {
								node_tNeo4jOutput_1.setProperty("name",
										row2.name);
							}

							if (row2.type != null) {
								node_tNeo4jOutput_1.setProperty("type",
										row2.type);
							}

							counter_tNeo4jOutput_1++;

							if (counter_tNeo4jOutput_1
									% Long.parseLong("30000") == 0) {
								tx_tNeo4jOutput_1.success();
								tx_tNeo4jOutput_1.finish();
								tx_tNeo4jOutput_1 = databaseService_tNeo4jOutput_1
										.beginTx();
							}

							nb_line_tNeo4jOutput_1++;

							tos_count_tNeo4jOutput_1++;

							/**
							 * [tNeo4jOutput_1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130704 last.fm nodes part 1.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tNeo4jOutput_1 end ] start
				 */

				currentComponent = "tNeo4jOutput_1";

				tx_tNeo4jOutput_1.success();
				tx_tNeo4jOutput_1.finish();

				globalMap.put("tNeo4jOutput_1_NB_LINE", nb_line_tNeo4jOutput_1);

				ok_Hash.put("tNeo4jOutput_1", true);
				end_Hash.put("tNeo4jOutput_1", System.currentTimeMillis());

				/**
				 * [tNeo4jOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_2Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.name = readString(dis);

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",name=" + name);
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.title = readString(dis);

					this.name = readString(dis);

					this.type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.title, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("title=" + title);
			sb.append(",name=" + name);
			sb.append(",type=" + type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row3Struct row4 = row3;

				/**
				 * [tNeo4jOutput_2 begin ] start
				 */

				ok_Hash.put("tNeo4jOutput_2", false);
				start_Hash.put("tNeo4jOutput_2", System.currentTimeMillis());
				currentComponent = "tNeo4jOutput_2";

				int tos_count_tNeo4jOutput_2 = 0;
				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jOutput_2 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				java.util.Map<String, org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>> indexNodeMap_tNeo4jOutput_2 = new java.util.HashMap<String, org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node>>();

				org.neo4j.graphdb.index.AutoIndexer<org.neo4j.graphdb.Node> autoIndexer_tNeo4jOutput_2 = databaseService_tNeo4jOutput_2
						.index().getNodeAutoIndexer();
				autoIndexer_tNeo4jOutput_2.setEnabled(true);

				autoIndexer_tNeo4jOutput_2.startAutoIndexingProperty("title");

				autoIndexer_tNeo4jOutput_2.startAutoIndexingProperty("name");

				autoIndexer_tNeo4jOutput_2.startAutoIndexingProperty("type");

				org.neo4j.graphdb.Transaction tx_tNeo4jOutput_2 = databaseService_tNeo4jOutput_2
						.beginTx();
				int nb_line_tNeo4jOutput_2 = 0;
				long counter_tNeo4jOutput_2 = 0;

				/**
				 * [tNeo4jOutput_2 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());
				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = "/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130704 last.fm nodes part 2.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130704 last.fm nodes part 2.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {

						row3 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row3.title = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row3.name = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row3.type = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tLogRow_2 main ] start
							 */

							currentComponent = "tLogRow_2";

							row4 = row3;

							tos_count_tLogRow_2++;

							/**
							 * [tLogRow_2 main ] stop
							 */

							/**
							 * [tNeo4jOutput_2 main ] start
							 */

							currentComponent = "tNeo4jOutput_2";

							org.neo4j.graphdb.Node node_tNeo4jOutput_2 = databaseService_tNeo4jOutput_2
									.createNode();

							if (row4.title != null) {
								node_tNeo4jOutput_2.setProperty("title",
										row4.title);
							}

							if (row4.name != null) {
								node_tNeo4jOutput_2.setProperty("name",
										row4.name);
							}

							if (row4.type != null) {
								node_tNeo4jOutput_2.setProperty("type",
										row4.type);
							}

							counter_tNeo4jOutput_2++;

							if (counter_tNeo4jOutput_2
									% Long.parseLong("30000") == 0) {
								tx_tNeo4jOutput_2.success();
								tx_tNeo4jOutput_2.finish();
								tx_tNeo4jOutput_2 = databaseService_tNeo4jOutput_2
										.beginTx();
							}

							nb_line_tNeo4jOutput_2++;

							tos_count_tNeo4jOutput_2++;

							/**
							 * [tNeo4jOutput_2 main ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130704 last.fm nodes part 2.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tNeo4jOutput_2 end ] start
				 */

				currentComponent = "tNeo4jOutput_2";

				tx_tNeo4jOutput_2.success();
				tx_tNeo4jOutput_2.finish();

				globalMap.put("tNeo4jOutput_2_NB_LINE", nb_line_tNeo4jOutput_2);

				ok_Hash.put("tNeo4jOutput_2", true);
				end_Hash.put("tNeo4jOutput_2", System.currentTimeMillis());

				/**
				 * [tNeo4jOutput_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row5Struct row6 = row5;
				row7Struct row7 = new row7Struct();
				row7Struct row8 = row7;

				/**
				 * [tNeo4jOutputRelationship_1 begin ] start
				 */

				ok_Hash.put("tNeo4jOutputRelationship_1", false);
				start_Hash.put("tNeo4jOutputRelationship_1",
						System.currentTimeMillis());
				currentComponent = "tNeo4jOutputRelationship_1";

				int tos_count_tNeo4jOutputRelationship_1 = 0;
				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jOutputRelationship_1 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> startIndexNode_tNeo4jOutputRelationship_1 = databaseService_tNeo4jOutputRelationship_1
						.index().forNodes("node_auto_index");
				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> endIndexNode_tNeo4jOutputRelationship_1 = databaseService_tNeo4jOutputRelationship_1
						.index().forNodes("node_auto_index");

				org.neo4j.graphdb.RelationshipType relationshipType_tNeo4jOutputRelationship_1 = org.neo4j.graphdb.DynamicRelationshipType
						.withName("PRECEDES");

				org.neo4j.graphdb.Transaction tx_tNeo4jOutputRelationship_1 = databaseService_tNeo4jOutputRelationship_1
						.beginTx();
				int nb_line_tNeo4jOutputRelationship_1 = 0;
				long counter_tNeo4jOutputRelationship_1 = 0;

				/**
				 * [tNeo4jOutputRelationship_1 begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());
				currentComponent = "tLogRow_4";

				int tos_count_tLogRow_4 = 0;

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());
				currentComponent = "tUniqRow_2";

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String from;
					String type;
					String to;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.from == null) ? 0 : this.from
											.hashCode());

							result = prime
									* result
									+ ((this.type == null) ? 0 : this.type
											.hashCode());

							result = prime
									* result
									+ ((this.to == null) ? 0 : this.to
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.from == null) {
							if (other.from != null)
								return false;
						} else if (!this.from.equals(other.from))
							return false;

						if (this.type == null) {
							if (other.type != null)
								return false;
						} else if (!this.type.equals(other.type))
							return false;

						if (this.to == null) {
							if (other.to != null)
								return false;
						} else if (!this.to.equals(other.to))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());
				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = "/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm PRECEDES rels.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm PRECEDES rels.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {

						row5 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row5 = new row5Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row5.from = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row5.type = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							row5.to = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tLogRow_3 main ] start
							 */

							currentComponent = "tLogRow_3";

							row6 = row5;

							tos_count_tLogRow_3++;

							/**
							 * [tLogRow_3 main ] stop
							 */

							/**
							 * [tUniqRow_2 main ] start
							 */

							currentComponent = "tUniqRow_2";

							row7 = null;
							if (row6.from == null) {
								finder_tUniqRow_2.from = null;
							} else {
								finder_tUniqRow_2.from = row6.from
										.toLowerCase();
							}
							if (row6.type == null) {
								finder_tUniqRow_2.type = null;
							} else {
								finder_tUniqRow_2.type = row6.type
										.toLowerCase();
							}
							if (row6.to == null) {
								finder_tUniqRow_2.to = null;
							} else {
								finder_tUniqRow_2.to = row6.to.toLowerCase();
							}
							finder_tUniqRow_2.hashCodeDirty = true;
							if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
								KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

								if (row6.from == null) {
									new_tUniqRow_2.from = null;
								} else {
									new_tUniqRow_2.from = row6.from
											.toLowerCase();
								}
								if (row6.type == null) {
									new_tUniqRow_2.type = null;
								} else {
									new_tUniqRow_2.type = row6.type
											.toLowerCase();
								}
								if (row6.to == null) {
									new_tUniqRow_2.to = null;
								} else {
									new_tUniqRow_2.to = row6.to.toLowerCase();
								}

								keystUniqRow_2.add(new_tUniqRow_2);
								if (row7 == null) {
									row7 = new row7Struct();
								}
								row7.from = row6.from;
								row7.type = row6.type;
								row7.to = row6.to;
								nb_uniques_tUniqRow_2++;
							} else {
								nb_duplicates_tUniqRow_2++;
							}

							tos_count_tUniqRow_2++;

							/**
							 * [tUniqRow_2 main ] stop
							 */
							// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tLogRow_4 main ] start
								 */

								currentComponent = "tLogRow_4";

								row8 = row7;

								tos_count_tLogRow_4++;

								/**
								 * [tLogRow_4 main ] stop
								 */

								/**
								 * [tNeo4jOutputRelationship_1 main ] start
								 */

								currentComponent = "tNeo4jOutputRelationship_1";

								{
									org.neo4j.graphdb.Node startNode_tNeo4jOutputRelationship_1 = startIndexNode_tNeo4jOutputRelationship_1
											.get("name", row8.from).getSingle();
									org.neo4j.graphdb.Node endNode_tNeo4jOutputRelationship_1 = endIndexNode_tNeo4jOutputRelationship_1
											.get("name", row8.to).getSingle();
									if (startNode_tNeo4jOutputRelationship_1 == null) {
										throw new RuntimeException(
												"Start node looked up by index with "
														+ "name"
														+ " as key and "
														+ row8.from
														+ " as value doesn't exist");
									}
									if (endNode_tNeo4jOutputRelationship_1 == null) {
										throw new RuntimeException(
												"End node looked up by index with "
														+ "name"
														+ " as key and "
														+ row8.from
														+ " as value doesn't exist");
									}

									org.neo4j.graphdb.Relationship relationship_tNeo4jOutputRelationship_1 = startNode_tNeo4jOutputRelationship_1
											.createRelationshipTo(
													endNode_tNeo4jOutputRelationship_1,
													relationshipType_tNeo4jOutputRelationship_1);

								}

								counter_tNeo4jOutputRelationship_1++;

								if (counter_tNeo4jOutputRelationship_1
										% Long.parseLong("30000") == 0) {
									tx_tNeo4jOutputRelationship_1.success();
									tx_tNeo4jOutputRelationship_1.finish();
									tx_tNeo4jOutputRelationship_1 = databaseService_tNeo4jOutputRelationship_1
											.beginTx();
								}

								nb_line_tNeo4jOutputRelationship_1++;

								tos_count_tNeo4jOutputRelationship_1++;

								/**
								 * [tNeo4jOutputRelationship_1 main ] stop
								 */

							} // End of branch "row7"

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm PRECEDES rels.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES",
						nb_duplicates_tUniqRow_2);

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tNeo4jOutputRelationship_1 end ] start
				 */

				currentComponent = "tNeo4jOutputRelationship_1";

				tx_tNeo4jOutputRelationship_1.success();
				tx_tNeo4jOutputRelationship_1.finish();

				globalMap.put("tNeo4jOutputRelationship_1_NB_LINE",
						nb_line_tNeo4jOutputRelationship_1);

				ok_Hash.put("tNeo4jOutputRelationship_1", true);
				end_Hash.put("tNeo4jOutputRelationship_1",
						System.currentTimeMillis());

				/**
				 * [tNeo4jOutputRelationship_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_4Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				row9Struct row10 = row9;
				row11Struct row11 = new row11Struct();
				row11Struct row12 = row11;

				/**
				 * [tNeo4jOutputRelationship_2 begin ] start
				 */

				ok_Hash.put("tNeo4jOutputRelationship_2", false);
				start_Hash.put("tNeo4jOutputRelationship_2",
						System.currentTimeMillis());
				currentComponent = "tNeo4jOutputRelationship_2";

				int tos_count_tNeo4jOutputRelationship_2 = 0;
				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jOutputRelationship_2 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> startIndexNode_tNeo4jOutputRelationship_2 = databaseService_tNeo4jOutputRelationship_2
						.index().forNodes("node_auto_index");
				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> endIndexNode_tNeo4jOutputRelationship_2 = databaseService_tNeo4jOutputRelationship_2
						.index().forNodes("node_auto_index");

				org.neo4j.graphdb.RelationshipType relationshipType_tNeo4jOutputRelationship_2 = org.neo4j.graphdb.DynamicRelationshipType
						.withName("LOGS");

				org.neo4j.graphdb.Transaction tx_tNeo4jOutputRelationship_2 = databaseService_tNeo4jOutputRelationship_2
						.beginTx();
				int nb_line_tNeo4jOutputRelationship_2 = 0;
				long counter_tNeo4jOutputRelationship_2 = 0;

				/**
				 * [tNeo4jOutputRelationship_2 begin ] stop
				 */

				/**
				 * [tLogRow_6 begin ] start
				 */

				ok_Hash.put("tLogRow_6", false);
				start_Hash.put("tLogRow_6", System.currentTimeMillis());
				currentComponent = "tLogRow_6";

				int tos_count_tLogRow_6 = 0;

				/**
				 * [tLogRow_6 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());
				currentComponent = "tUniqRow_3";

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String from;
					String type;
					String to;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.from == null) ? 0 : this.from
											.hashCode());

							result = prime
									* result
									+ ((this.type == null) ? 0 : this.type
											.hashCode());

							result = prime
									* result
									+ ((this.to == null) ? 0 : this.to
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.from == null) {
							if (other.from != null)
								return false;
						} else if (!this.from.equals(other.from))
							return false;

						if (this.type == null) {
							if (other.type != null)
								return false;
						} else if (!this.type.equals(other.type))
							return false;

						if (this.to == null) {
							if (other.to != null)
								return false;
						} else if (!this.to.equals(other.to))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());
				currentComponent = "tLogRow_5";

				int tos_count_tLogRow_5 = 0;

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				try {

					Object filename_tFileInputDelimited_4 = "/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm LOGS rels.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0
								|| random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm LOGS rels.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null
							&& fid_tFileInputDelimited_4.nextRecord()) {

						row9 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row9 = new row9Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row9.from = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row9.type = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							row9.to = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tLogRow_5 main ] start
							 */

							currentComponent = "tLogRow_5";

							row10 = row9;

							tos_count_tLogRow_5++;

							/**
							 * [tLogRow_5 main ] stop
							 */

							/**
							 * [tUniqRow_3 main ] start
							 */

							currentComponent = "tUniqRow_3";

							row11 = null;
							if (row10.from == null) {
								finder_tUniqRow_3.from = null;
							} else {
								finder_tUniqRow_3.from = row10.from
										.toLowerCase();
							}
							if (row10.type == null) {
								finder_tUniqRow_3.type = null;
							} else {
								finder_tUniqRow_3.type = row10.type
										.toLowerCase();
							}
							if (row10.to == null) {
								finder_tUniqRow_3.to = null;
							} else {
								finder_tUniqRow_3.to = row10.to.toLowerCase();
							}
							finder_tUniqRow_3.hashCodeDirty = true;
							if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
								KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

								if (row10.from == null) {
									new_tUniqRow_3.from = null;
								} else {
									new_tUniqRow_3.from = row10.from
											.toLowerCase();
								}
								if (row10.type == null) {
									new_tUniqRow_3.type = null;
								} else {
									new_tUniqRow_3.type = row10.type
											.toLowerCase();
								}
								if (row10.to == null) {
									new_tUniqRow_3.to = null;
								} else {
									new_tUniqRow_3.to = row10.to.toLowerCase();
								}

								keystUniqRow_3.add(new_tUniqRow_3);
								if (row11 == null) {
									row11 = new row11Struct();
								}
								row11.from = row10.from;
								row11.type = row10.type;
								row11.to = row10.to;
								nb_uniques_tUniqRow_3++;
							} else {
								nb_duplicates_tUniqRow_3++;
							}

							tos_count_tUniqRow_3++;

							/**
							 * [tUniqRow_3 main ] stop
							 */
							// Start of branch "row11"
							if (row11 != null) {

								/**
								 * [tLogRow_6 main ] start
								 */

								currentComponent = "tLogRow_6";

								row12 = row11;

								tos_count_tLogRow_6++;

								/**
								 * [tLogRow_6 main ] stop
								 */

								/**
								 * [tNeo4jOutputRelationship_2 main ] start
								 */

								currentComponent = "tNeo4jOutputRelationship_2";

								{
									org.neo4j.graphdb.Node startNode_tNeo4jOutputRelationship_2 = startIndexNode_tNeo4jOutputRelationship_2
											.get("name", row12.from)
											.getSingle();
									org.neo4j.graphdb.Node endNode_tNeo4jOutputRelationship_2 = endIndexNode_tNeo4jOutputRelationship_2
											.get("name", row12.to).getSingle();
									if (startNode_tNeo4jOutputRelationship_2 == null) {
										throw new RuntimeException(
												"Start node looked up by index with "
														+ "name"
														+ " as key and "
														+ row12.from
														+ " as value doesn't exist");
									}
									if (endNode_tNeo4jOutputRelationship_2 == null) {
										throw new RuntimeException(
												"End node looked up by index with "
														+ "name"
														+ " as key and "
														+ row12.from
														+ " as value doesn't exist");
									}

									org.neo4j.graphdb.Relationship relationship_tNeo4jOutputRelationship_2 = startNode_tNeo4jOutputRelationship_2
											.createRelationshipTo(
													endNode_tNeo4jOutputRelationship_2,
													relationshipType_tNeo4jOutputRelationship_2);

								}

								counter_tNeo4jOutputRelationship_2++;

								if (counter_tNeo4jOutputRelationship_2
										% Long.parseLong("30000") == 0) {
									tx_tNeo4jOutputRelationship_2.success();
									tx_tNeo4jOutputRelationship_2.finish();
									tx_tNeo4jOutputRelationship_2 = databaseService_tNeo4jOutputRelationship_2
											.beginTx();
								}

								nb_line_tNeo4jOutputRelationship_2++;

								tos_count_tNeo4jOutputRelationship_2++;

								/**
								 * [tNeo4jOutputRelationship_2 main ] stop
								 */

							} // End of branch "row11"

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm LOGS rels.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								fid_tFileInputDelimited_4.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES",
						nb_duplicates_tUniqRow_3);

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tLogRow_6 end ] start
				 */

				currentComponent = "tLogRow_6";

				ok_Hash.put("tLogRow_6", true);
				end_Hash.put("tLogRow_6", System.currentTimeMillis());

				/**
				 * [tLogRow_6 end ] stop
				 */

				/**
				 * [tNeo4jOutputRelationship_2 end ] start
				 */

				currentComponent = "tNeo4jOutputRelationship_2";

				tx_tNeo4jOutputRelationship_2.success();
				tx_tNeo4jOutputRelationship_2.finish();

				globalMap.put("tNeo4jOutputRelationship_2_NB_LINE",
						nb_line_tNeo4jOutputRelationship_2);

				ok_Hash.put("tNeo4jOutputRelationship_2", true);
				end_Hash.put("tNeo4jOutputRelationship_2",
						System.currentTimeMillis());

				/**
				 * [tNeo4jOutputRelationship_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_5Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				row13Struct row14 = row13;
				row15Struct row15 = new row15Struct();
				row15Struct row16 = row15;

				/**
				 * [tNeo4jOutputRelationship_3 begin ] start
				 */

				ok_Hash.put("tNeo4jOutputRelationship_3", false);
				start_Hash.put("tNeo4jOutputRelationship_3",
						System.currentTimeMillis());
				currentComponent = "tNeo4jOutputRelationship_3";

				int tos_count_tNeo4jOutputRelationship_3 = 0;
				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jOutputRelationship_3 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> startIndexNode_tNeo4jOutputRelationship_3 = databaseService_tNeo4jOutputRelationship_3
						.index().forNodes("node_auto_index");
				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> endIndexNode_tNeo4jOutputRelationship_3 = databaseService_tNeo4jOutputRelationship_3
						.index().forNodes("node_auto_index");

				org.neo4j.graphdb.RelationshipType relationshipType_tNeo4jOutputRelationship_3 = org.neo4j.graphdb.DynamicRelationshipType
						.withName("ON_DATE");

				org.neo4j.graphdb.Transaction tx_tNeo4jOutputRelationship_3 = databaseService_tNeo4jOutputRelationship_3
						.beginTx();
				int nb_line_tNeo4jOutputRelationship_3 = 0;
				long counter_tNeo4jOutputRelationship_3 = 0;

				/**
				 * [tNeo4jOutputRelationship_3 begin ] stop
				 */

				/**
				 * [tLogRow_8 begin ] start
				 */

				ok_Hash.put("tLogRow_8", false);
				start_Hash.put("tLogRow_8", System.currentTimeMillis());
				currentComponent = "tLogRow_8";

				int tos_count_tLogRow_8 = 0;

				/**
				 * [tLogRow_8 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());
				currentComponent = "tUniqRow_4";

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String from;
					String type;
					String to;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.from == null) ? 0 : this.from
											.hashCode());

							result = prime
									* result
									+ ((this.type == null) ? 0 : this.type
											.hashCode());

							result = prime
									* result
									+ ((this.to == null) ? 0 : this.to
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.from == null) {
							if (other.from != null)
								return false;
						} else if (!this.from.equals(other.from))
							return false;

						if (this.type == null) {
							if (other.type != null)
								return false;
						} else if (!this.type.equals(other.type))
							return false;

						if (this.to == null) {
							if (other.to != null)
								return false;
						} else if (!this.to.equals(other.to))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());
				currentComponent = "tLogRow_7";

				int tos_count_tLogRow_7 = 0;

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				try {

					Object filename_tFileInputDelimited_5 = "/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm ON_DATE rels.csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0
								|| random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm ON_DATE rels.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null
							&& fid_tFileInputDelimited_5.nextRecord()) {

						row13 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row13 = new row13Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							columnIndexWithD_tFileInputDelimited_5 = 0;

							row13.from = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 1;

							row13.type = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 2;

							row13.to = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row13 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tLogRow_7 main ] start
							 */

							currentComponent = "tLogRow_7";

							row14 = row13;

							tos_count_tLogRow_7++;

							/**
							 * [tLogRow_7 main ] stop
							 */

							/**
							 * [tUniqRow_4 main ] start
							 */

							currentComponent = "tUniqRow_4";

							row15 = null;
							if (row14.from == null) {
								finder_tUniqRow_4.from = null;
							} else {
								finder_tUniqRow_4.from = row14.from
										.toLowerCase();
							}
							if (row14.type == null) {
								finder_tUniqRow_4.type = null;
							} else {
								finder_tUniqRow_4.type = row14.type
										.toLowerCase();
							}
							if (row14.to == null) {
								finder_tUniqRow_4.to = null;
							} else {
								finder_tUniqRow_4.to = row14.to.toLowerCase();
							}
							finder_tUniqRow_4.hashCodeDirty = true;
							if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
								KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

								if (row14.from == null) {
									new_tUniqRow_4.from = null;
								} else {
									new_tUniqRow_4.from = row14.from
											.toLowerCase();
								}
								if (row14.type == null) {
									new_tUniqRow_4.type = null;
								} else {
									new_tUniqRow_4.type = row14.type
											.toLowerCase();
								}
								if (row14.to == null) {
									new_tUniqRow_4.to = null;
								} else {
									new_tUniqRow_4.to = row14.to.toLowerCase();
								}

								keystUniqRow_4.add(new_tUniqRow_4);
								if (row15 == null) {
									row15 = new row15Struct();
								}
								row15.from = row14.from;
								row15.type = row14.type;
								row15.to = row14.to;
								nb_uniques_tUniqRow_4++;
							} else {
								nb_duplicates_tUniqRow_4++;
							}

							tos_count_tUniqRow_4++;

							/**
							 * [tUniqRow_4 main ] stop
							 */
							// Start of branch "row15"
							if (row15 != null) {

								/**
								 * [tLogRow_8 main ] start
								 */

								currentComponent = "tLogRow_8";

								row16 = row15;

								tos_count_tLogRow_8++;

								/**
								 * [tLogRow_8 main ] stop
								 */

								/**
								 * [tNeo4jOutputRelationship_3 main ] start
								 */

								currentComponent = "tNeo4jOutputRelationship_3";

								{
									org.neo4j.graphdb.Node startNode_tNeo4jOutputRelationship_3 = startIndexNode_tNeo4jOutputRelationship_3
											.get("name", row16.from)
											.getSingle();
									org.neo4j.graphdb.Node endNode_tNeo4jOutputRelationship_3 = endIndexNode_tNeo4jOutputRelationship_3
											.get("name", row16.to).getSingle();
									if (startNode_tNeo4jOutputRelationship_3 == null) {
										throw new RuntimeException(
												"Start node looked up by index with "
														+ "name"
														+ " as key and "
														+ row16.from
														+ " as value doesn't exist");
									}
									if (endNode_tNeo4jOutputRelationship_3 == null) {
										throw new RuntimeException(
												"End node looked up by index with "
														+ "name"
														+ " as key and "
														+ row16.from
														+ " as value doesn't exist");
									}

									org.neo4j.graphdb.Relationship relationship_tNeo4jOutputRelationship_3 = startNode_tNeo4jOutputRelationship_3
											.createRelationshipTo(
													endNode_tNeo4jOutputRelationship_3,
													relationshipType_tNeo4jOutputRelationship_3);

								}

								counter_tNeo4jOutputRelationship_3++;

								if (counter_tNeo4jOutputRelationship_3
										% Long.parseLong("30000") == 0) {
									tx_tNeo4jOutputRelationship_3.success();
									tx_tNeo4jOutputRelationship_3.finish();
									tx_tNeo4jOutputRelationship_3 = databaseService_tNeo4jOutputRelationship_3
											.beginTx();
								}

								nb_line_tNeo4jOutputRelationship_3++;

								tos_count_tNeo4jOutputRelationship_3++;

								/**
								 * [tNeo4jOutputRelationship_3 main ] stop
								 */

							} // End of branch "row15"

						} // End of branch "row13"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm ON_DATE rels.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								fid_tFileInputDelimited_5.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES",
						nb_duplicates_tUniqRow_4);

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tLogRow_8 end ] start
				 */

				currentComponent = "tLogRow_8";

				ok_Hash.put("tLogRow_8", true);
				end_Hash.put("tLogRow_8", System.currentTimeMillis());

				/**
				 * [tLogRow_8 end ] stop
				 */

				/**
				 * [tNeo4jOutputRelationship_3 end ] start
				 */

				currentComponent = "tNeo4jOutputRelationship_3";

				tx_tNeo4jOutputRelationship_3.success();
				tx_tNeo4jOutputRelationship_3.finish();

				globalMap.put("tNeo4jOutputRelationship_3_NB_LINE",
						nb_line_tNeo4jOutputRelationship_3);

				ok_Hash.put("tNeo4jOutputRelationship_3", true);
				end_Hash.put("tNeo4jOutputRelationship_3",
						System.currentTimeMillis());

				/**
				 * [tNeo4jOutputRelationship_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_5:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_6Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();
				row17Struct row18 = row17;
				row19Struct row19 = new row19Struct();
				row19Struct row20 = row19;

				/**
				 * [tNeo4jOutputRelationship_4 begin ] start
				 */

				ok_Hash.put("tNeo4jOutputRelationship_4", false);
				start_Hash.put("tNeo4jOutputRelationship_4",
						System.currentTimeMillis());
				currentComponent = "tNeo4jOutputRelationship_4";

				int tos_count_tNeo4jOutputRelationship_4 = 0;
				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jOutputRelationship_4 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> startIndexNode_tNeo4jOutputRelationship_4 = databaseService_tNeo4jOutputRelationship_4
						.index().forNodes("node_auto_index");
				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> endIndexNode_tNeo4jOutputRelationship_4 = databaseService_tNeo4jOutputRelationship_4
						.index().forNodes("node_auto_index");

				org.neo4j.graphdb.RelationshipType relationshipType_tNeo4jOutputRelationship_4 = org.neo4j.graphdb.DynamicRelationshipType
						.withName("FEATURES");

				org.neo4j.graphdb.Transaction tx_tNeo4jOutputRelationship_4 = databaseService_tNeo4jOutputRelationship_4
						.beginTx();
				int nb_line_tNeo4jOutputRelationship_4 = 0;
				long counter_tNeo4jOutputRelationship_4 = 0;

				/**
				 * [tNeo4jOutputRelationship_4 begin ] stop
				 */

				/**
				 * [tLogRow_10 begin ] start
				 */

				ok_Hash.put("tLogRow_10", false);
				start_Hash.put("tLogRow_10", System.currentTimeMillis());
				currentComponent = "tLogRow_10";

				int tos_count_tLogRow_10 = 0;

				/**
				 * [tLogRow_10 begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());
				currentComponent = "tUniqRow_5";

				int tos_count_tUniqRow_5 = 0;

				class KeyStruct_tUniqRow_5 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String from;
					String type;
					String to;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.from == null) ? 0 : this.from
											.hashCode());

							result = prime
									* result
									+ ((this.type == null) ? 0 : this.type
											.hashCode());

							result = prime
									* result
									+ ((this.to == null) ? 0 : this.to
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;

						if (this.from == null) {
							if (other.from != null)
								return false;
						} else if (!this.from.equals(other.from))
							return false;

						if (this.type == null) {
							if (other.type != null)
								return false;
						} else if (!this.type.equals(other.type))
							return false;

						if (this.to == null) {
							if (other.to != null)
								return false;
						} else if (!this.to.equals(other.to))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;
				KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
				java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>();

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tLogRow_9 begin ] start
				 */

				ok_Hash.put("tLogRow_9", false);
				start_Hash.put("tLogRow_9", System.currentTimeMillis());
				currentComponent = "tLogRow_9";

				int tos_count_tLogRow_9 = 0;

				/**
				 * [tLogRow_9 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				try {

					Object filename_tFileInputDelimited_6 = "/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm FEATURES rels.csv";
					if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
						if (footer_value_tFileInputDelimited_6 > 0
								|| random_value_tFileInputDelimited_6 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm FEATURES rels.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_6 != null
							&& fid_tFileInputDelimited_6.nextRecord()) {

						row17 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row17 = new row17Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_6 = 0;

							columnIndexWithD_tFileInputDelimited_6 = 0;

							row17.from = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 1;

							row17.type = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 2;

							row17.to = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tLogRow_9 main ] start
							 */

							currentComponent = "tLogRow_9";

							row18 = row17;

							tos_count_tLogRow_9++;

							/**
							 * [tLogRow_9 main ] stop
							 */

							/**
							 * [tUniqRow_5 main ] start
							 */

							currentComponent = "tUniqRow_5";

							row19 = null;
							if (row18.from == null) {
								finder_tUniqRow_5.from = null;
							} else {
								finder_tUniqRow_5.from = row18.from
										.toLowerCase();
							}
							if (row18.type == null) {
								finder_tUniqRow_5.type = null;
							} else {
								finder_tUniqRow_5.type = row18.type
										.toLowerCase();
							}
							if (row18.to == null) {
								finder_tUniqRow_5.to = null;
							} else {
								finder_tUniqRow_5.to = row18.to.toLowerCase();
							}
							finder_tUniqRow_5.hashCodeDirty = true;
							if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
								KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

								if (row18.from == null) {
									new_tUniqRow_5.from = null;
								} else {
									new_tUniqRow_5.from = row18.from
											.toLowerCase();
								}
								if (row18.type == null) {
									new_tUniqRow_5.type = null;
								} else {
									new_tUniqRow_5.type = row18.type
											.toLowerCase();
								}
								if (row18.to == null) {
									new_tUniqRow_5.to = null;
								} else {
									new_tUniqRow_5.to = row18.to.toLowerCase();
								}

								keystUniqRow_5.add(new_tUniqRow_5);
								if (row19 == null) {
									row19 = new row19Struct();
								}
								row19.from = row18.from;
								row19.type = row18.type;
								row19.to = row18.to;
								nb_uniques_tUniqRow_5++;
							} else {
								nb_duplicates_tUniqRow_5++;
							}

							tos_count_tUniqRow_5++;

							/**
							 * [tUniqRow_5 main ] stop
							 */
							// Start of branch "row19"
							if (row19 != null) {

								/**
								 * [tLogRow_10 main ] start
								 */

								currentComponent = "tLogRow_10";

								row20 = row19;

								tos_count_tLogRow_10++;

								/**
								 * [tLogRow_10 main ] stop
								 */

								/**
								 * [tNeo4jOutputRelationship_4 main ] start
								 */

								currentComponent = "tNeo4jOutputRelationship_4";

								{
									org.neo4j.graphdb.Node startNode_tNeo4jOutputRelationship_4 = startIndexNode_tNeo4jOutputRelationship_4
											.get("name", row20.from)
											.getSingle();
									org.neo4j.graphdb.Node endNode_tNeo4jOutputRelationship_4 = endIndexNode_tNeo4jOutputRelationship_4
											.get("name", row20.to).getSingle();
									if (startNode_tNeo4jOutputRelationship_4 == null) {
										throw new RuntimeException(
												"Start node looked up by index with "
														+ "name"
														+ " as key and "
														+ row20.from
														+ " as value doesn't exist");
									}
									if (endNode_tNeo4jOutputRelationship_4 == null) {
										throw new RuntimeException(
												"End node looked up by index with "
														+ "name"
														+ " as key and "
														+ row20.from
														+ " as value doesn't exist");
									}

									org.neo4j.graphdb.Relationship relationship_tNeo4jOutputRelationship_4 = startNode_tNeo4jOutputRelationship_4
											.createRelationshipTo(
													endNode_tNeo4jOutputRelationship_4,
													relationshipType_tNeo4jOutputRelationship_4);

								}

								counter_tNeo4jOutputRelationship_4++;

								if (counter_tNeo4jOutputRelationship_4
										% Long.parseLong("30000") == 0) {
									tx_tNeo4jOutputRelationship_4.success();
									tx_tNeo4jOutputRelationship_4.finish();
									tx_tNeo4jOutputRelationship_4 = databaseService_tNeo4jOutputRelationship_4
											.beginTx();
								}

								nb_line_tNeo4jOutputRelationship_4++;

								tos_count_tNeo4jOutputRelationship_4++;

								/**
								 * [tNeo4jOutputRelationship_4 main ] stop
								 */

							} // End of branch "row19"

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

					}
				} finally {
					if (!((Object) ("/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm FEATURES rels.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								fid_tFileInputDelimited_6.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tLogRow_9 end ] start
				 */

				currentComponent = "tLogRow_9";

				ok_Hash.put("tLogRow_9", true);
				end_Hash.put("tLogRow_9", System.currentTimeMillis());

				/**
				 * [tLogRow_9 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES",
						nb_duplicates_tUniqRow_5);

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tLogRow_10 end ] start
				 */

				currentComponent = "tLogRow_10";

				ok_Hash.put("tLogRow_10", true);
				end_Hash.put("tLogRow_10", System.currentTimeMillis());

				/**
				 * [tLogRow_10 end ] stop
				 */

				/**
				 * [tNeo4jOutputRelationship_4 end ] start
				 */

				currentComponent = "tNeo4jOutputRelationship_4";

				tx_tNeo4jOutputRelationship_4.success();
				tx_tNeo4jOutputRelationship_4.finish();

				globalMap.put("tNeo4jOutputRelationship_4_NB_LINE",
						nb_line_tNeo4jOutputRelationship_4);

				ok_Hash.put("tNeo4jOutputRelationship_4", true);
				end_Hash.put("tNeo4jOutputRelationship_4",
						System.currentTimeMillis());

				/**
				 * [tNeo4jOutputRelationship_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_6:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_7Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();
				row21Struct row22 = row21;
				row23Struct row23 = new row23Struct();
				row23Struct row24 = row23;

				/**
				 * [tNeo4jOutputRelationship_5 begin ] start
				 */

				ok_Hash.put("tNeo4jOutputRelationship_5", false);
				start_Hash.put("tNeo4jOutputRelationship_5",
						System.currentTimeMillis());
				currentComponent = "tNeo4jOutputRelationship_5";

				int tos_count_tNeo4jOutputRelationship_5 = 0;
				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jOutputRelationship_5 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> startIndexNode_tNeo4jOutputRelationship_5 = databaseService_tNeo4jOutputRelationship_5
						.index().forNodes("node_auto_index");
				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> endIndexNode_tNeo4jOutputRelationship_5 = databaseService_tNeo4jOutputRelationship_5
						.index().forNodes("node_auto_index");

				org.neo4j.graphdb.RelationshipType relationshipType_tNeo4jOutputRelationship_5 = org.neo4j.graphdb.DynamicRelationshipType
						.withName("PERFORMS");

				org.neo4j.graphdb.Transaction tx_tNeo4jOutputRelationship_5 = databaseService_tNeo4jOutputRelationship_5
						.beginTx();
				int nb_line_tNeo4jOutputRelationship_5 = 0;
				long counter_tNeo4jOutputRelationship_5 = 0;

				/**
				 * [tNeo4jOutputRelationship_5 begin ] stop
				 */

				/**
				 * [tLogRow_12 begin ] start
				 */

				ok_Hash.put("tLogRow_12", false);
				start_Hash.put("tLogRow_12", System.currentTimeMillis());
				currentComponent = "tLogRow_12";

				int tos_count_tLogRow_12 = 0;

				/**
				 * [tLogRow_12 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());
				currentComponent = "tUniqRow_6";

				int tos_count_tUniqRow_6 = 0;

				class KeyStruct_tUniqRow_6 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String from;
					String type;
					String to;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.from == null) ? 0 : this.from
											.hashCode());

							result = prime
									* result
									+ ((this.type == null) ? 0 : this.type
											.hashCode());

							result = prime
									* result
									+ ((this.to == null) ? 0 : this.to
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

						if (this.from == null) {
							if (other.from != null)
								return false;
						} else if (!this.from.equals(other.from))
							return false;

						if (this.type == null) {
							if (other.type != null)
								return false;
						} else if (!this.type.equals(other.type))
							return false;

						if (this.to == null) {
							if (other.to != null)
								return false;
						} else if (!this.to.equals(other.to))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;
				KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
				java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tLogRow_11 begin ] start
				 */

				ok_Hash.put("tLogRow_11", false);
				start_Hash.put("tLogRow_11", System.currentTimeMillis());
				currentComponent = "tLogRow_11";

				int tos_count_tLogRow_11 = 0;

				/**
				 * [tLogRow_11 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				try {

					Object filename_tFileInputDelimited_7 = "/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm PERFORMS rels.csv";
					if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
						if (footer_value_tFileInputDelimited_7 > 0
								|| random_value_tFileInputDelimited_7 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm PERFORMS rels.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_7 != null
							&& fid_tFileInputDelimited_7.nextRecord()) {

						row21 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row21 = new row21Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_7 = 0;

							columnIndexWithD_tFileInputDelimited_7 = 0;

							row21.from = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 1;

							row21.type = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

							columnIndexWithD_tFileInputDelimited_7 = 2;

							row21.to = fid_tFileInputDelimited_7
									.get(columnIndexWithD_tFileInputDelimited_7);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row21 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */
						// Start of branch "row21"
						if (row21 != null) {

							/**
							 * [tLogRow_11 main ] start
							 */

							currentComponent = "tLogRow_11";

							row22 = row21;

							tos_count_tLogRow_11++;

							/**
							 * [tLogRow_11 main ] stop
							 */

							/**
							 * [tUniqRow_6 main ] start
							 */

							currentComponent = "tUniqRow_6";

							row23 = null;
							if (row22.from == null) {
								finder_tUniqRow_6.from = null;
							} else {
								finder_tUniqRow_6.from = row22.from
										.toLowerCase();
							}
							if (row22.type == null) {
								finder_tUniqRow_6.type = null;
							} else {
								finder_tUniqRow_6.type = row22.type
										.toLowerCase();
							}
							if (row22.to == null) {
								finder_tUniqRow_6.to = null;
							} else {
								finder_tUniqRow_6.to = row22.to.toLowerCase();
							}
							finder_tUniqRow_6.hashCodeDirty = true;
							if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
								KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

								if (row22.from == null) {
									new_tUniqRow_6.from = null;
								} else {
									new_tUniqRow_6.from = row22.from
											.toLowerCase();
								}
								if (row22.type == null) {
									new_tUniqRow_6.type = null;
								} else {
									new_tUniqRow_6.type = row22.type
											.toLowerCase();
								}
								if (row22.to == null) {
									new_tUniqRow_6.to = null;
								} else {
									new_tUniqRow_6.to = row22.to.toLowerCase();
								}

								keystUniqRow_6.add(new_tUniqRow_6);
								if (row23 == null) {
									row23 = new row23Struct();
								}
								row23.from = row22.from;
								row23.type = row22.type;
								row23.to = row22.to;
								nb_uniques_tUniqRow_6++;
							} else {
								nb_duplicates_tUniqRow_6++;
							}

							tos_count_tUniqRow_6++;

							/**
							 * [tUniqRow_6 main ] stop
							 */
							// Start of branch "row23"
							if (row23 != null) {

								/**
								 * [tLogRow_12 main ] start
								 */

								currentComponent = "tLogRow_12";

								row24 = row23;

								tos_count_tLogRow_12++;

								/**
								 * [tLogRow_12 main ] stop
								 */

								/**
								 * [tNeo4jOutputRelationship_5 main ] start
								 */

								currentComponent = "tNeo4jOutputRelationship_5";

								{
									org.neo4j.graphdb.Node startNode_tNeo4jOutputRelationship_5 = startIndexNode_tNeo4jOutputRelationship_5
											.get("name", row24.from)
											.getSingle();
									org.neo4j.graphdb.Node endNode_tNeo4jOutputRelationship_5 = endIndexNode_tNeo4jOutputRelationship_5
											.get("name", row24.to).getSingle();
									if (startNode_tNeo4jOutputRelationship_5 == null) {
										throw new RuntimeException(
												"Start node looked up by index with "
														+ "name"
														+ " as key and "
														+ row24.from
														+ " as value doesn't exist");
									}
									if (endNode_tNeo4jOutputRelationship_5 == null) {
										throw new RuntimeException(
												"End node looked up by index with "
														+ "name"
														+ " as key and "
														+ row24.from
														+ " as value doesn't exist");
									}

									org.neo4j.graphdb.Relationship relationship_tNeo4jOutputRelationship_5 = startNode_tNeo4jOutputRelationship_5
											.createRelationshipTo(
													endNode_tNeo4jOutputRelationship_5,
													relationshipType_tNeo4jOutputRelationship_5);

								}

								counter_tNeo4jOutputRelationship_5++;

								if (counter_tNeo4jOutputRelationship_5
										% Long.parseLong("30000") == 0) {
									tx_tNeo4jOutputRelationship_5.success();
									tx_tNeo4jOutputRelationship_5.finish();
									tx_tNeo4jOutputRelationship_5 = databaseService_tNeo4jOutputRelationship_5
											.beginTx();
								}

								nb_line_tNeo4jOutputRelationship_5++;

								tos_count_tNeo4jOutputRelationship_5++;

								/**
								 * [tNeo4jOutputRelationship_5 main ] stop
								 */

							} // End of branch "row23"

						} // End of branch "row21"

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

					}
				} finally {
					if (!((Object) ("/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm PERFORMS rels.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_7 != null) {
							fid_tFileInputDelimited_7.close();
						}
					}
					if (fid_tFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								fid_tFileInputDelimited_7.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tLogRow_11 end ] start
				 */

				currentComponent = "tLogRow_11";

				ok_Hash.put("tLogRow_11", true);
				end_Hash.put("tLogRow_11", System.currentTimeMillis());

				/**
				 * [tLogRow_11 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES",
						nb_duplicates_tUniqRow_6);

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tLogRow_12 end ] start
				 */

				currentComponent = "tLogRow_12";

				ok_Hash.put("tLogRow_12", true);
				end_Hash.put("tLogRow_12", System.currentTimeMillis());

				/**
				 * [tLogRow_12 end ] stop
				 */

				/**
				 * [tNeo4jOutputRelationship_5 end ] start
				 */

				currentComponent = "tNeo4jOutputRelationship_5";

				tx_tNeo4jOutputRelationship_5.success();
				tx_tNeo4jOutputRelationship_5.finish();

				globalMap.put("tNeo4jOutputRelationship_5_NB_LINE",
						nb_line_tNeo4jOutputRelationship_5);

				ok_Hash.put("tNeo4jOutputRelationship_5", true);
				end_Hash.put("tNeo4jOutputRelationship_5",
						System.currentTimeMillis());

				/**
				 * [tNeo4jOutputRelationship_5 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_7:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_8Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();
				row25Struct row26 = row25;
				row27Struct row27 = new row27Struct();
				row27Struct row28 = row27;

				/**
				 * [tNeo4jOutputRelationship_6 begin ] start
				 */

				ok_Hash.put("tNeo4jOutputRelationship_6", false);
				start_Hash.put("tNeo4jOutputRelationship_6",
						System.currentTimeMillis());
				currentComponent = "tNeo4jOutputRelationship_6";

				int tos_count_tNeo4jOutputRelationship_6 = 0;
				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jOutputRelationship_6 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> startIndexNode_tNeo4jOutputRelationship_6 = databaseService_tNeo4jOutputRelationship_6
						.index().forNodes("node_auto_index");
				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> endIndexNode_tNeo4jOutputRelationship_6 = databaseService_tNeo4jOutputRelationship_6
						.index().forNodes("node_auto_index");

				org.neo4j.graphdb.RelationshipType relationshipType_tNeo4jOutputRelationship_6 = org.neo4j.graphdb.DynamicRelationshipType
						.withName("CREATES");

				org.neo4j.graphdb.Transaction tx_tNeo4jOutputRelationship_6 = databaseService_tNeo4jOutputRelationship_6
						.beginTx();
				int nb_line_tNeo4jOutputRelationship_6 = 0;
				long counter_tNeo4jOutputRelationship_6 = 0;

				/**
				 * [tNeo4jOutputRelationship_6 begin ] stop
				 */

				/**
				 * [tLogRow_14 begin ] start
				 */

				ok_Hash.put("tLogRow_14", false);
				start_Hash.put("tLogRow_14", System.currentTimeMillis());
				currentComponent = "tLogRow_14";

				int tos_count_tLogRow_14 = 0;

				/**
				 * [tLogRow_14 begin ] stop
				 */

				/**
				 * [tUniqRow_7 begin ] start
				 */

				ok_Hash.put("tUniqRow_7", false);
				start_Hash.put("tUniqRow_7", System.currentTimeMillis());
				currentComponent = "tUniqRow_7";

				int tos_count_tUniqRow_7 = 0;

				class KeyStruct_tUniqRow_7 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String from;
					String type;
					String to;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.from == null) ? 0 : this.from
											.hashCode());

							result = prime
									* result
									+ ((this.type == null) ? 0 : this.type
											.hashCode());

							result = prime
									* result
									+ ((this.to == null) ? 0 : this.to
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;

						if (this.from == null) {
							if (other.from != null)
								return false;
						} else if (!this.from.equals(other.from))
							return false;

						if (this.type == null) {
							if (other.type != null)
								return false;
						} else if (!this.type.equals(other.type))
							return false;

						if (this.to == null) {
							if (other.to != null)
								return false;
						} else if (!this.to.equals(other.to))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_7 = 0;
				int nb_duplicates_tUniqRow_7 = 0;
				KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
				java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>();

				/**
				 * [tUniqRow_7 begin ] stop
				 */

				/**
				 * [tLogRow_13 begin ] start
				 */

				ok_Hash.put("tLogRow_13", false);
				start_Hash.put("tLogRow_13", System.currentTimeMillis());
				currentComponent = "tLogRow_13";

				int tos_count_tLogRow_13 = 0;

				/**
				 * [tLogRow_13 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				try {

					Object filename_tFileInputDelimited_8 = "/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm CREATES rels.csv";
					if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
						if (footer_value_tFileInputDelimited_8 > 0
								|| random_value_tFileInputDelimited_8 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm CREATES rels.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_8 != null
							&& fid_tFileInputDelimited_8.nextRecord()) {

						row25 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row25 = new row25Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_8 = 0;

							columnIndexWithD_tFileInputDelimited_8 = 0;

							row25.from = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 1;

							row25.type = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 2;

							row25.to = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row25 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */
						// Start of branch "row25"
						if (row25 != null) {

							/**
							 * [tLogRow_13 main ] start
							 */

							currentComponent = "tLogRow_13";

							row26 = row25;

							tos_count_tLogRow_13++;

							/**
							 * [tLogRow_13 main ] stop
							 */

							/**
							 * [tUniqRow_7 main ] start
							 */

							currentComponent = "tUniqRow_7";

							row27 = null;
							if (row26.from == null) {
								finder_tUniqRow_7.from = null;
							} else {
								finder_tUniqRow_7.from = row26.from
										.toLowerCase();
							}
							if (row26.type == null) {
								finder_tUniqRow_7.type = null;
							} else {
								finder_tUniqRow_7.type = row26.type
										.toLowerCase();
							}
							if (row26.to == null) {
								finder_tUniqRow_7.to = null;
							} else {
								finder_tUniqRow_7.to = row26.to.toLowerCase();
							}
							finder_tUniqRow_7.hashCodeDirty = true;
							if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
								KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

								if (row26.from == null) {
									new_tUniqRow_7.from = null;
								} else {
									new_tUniqRow_7.from = row26.from
											.toLowerCase();
								}
								if (row26.type == null) {
									new_tUniqRow_7.type = null;
								} else {
									new_tUniqRow_7.type = row26.type
											.toLowerCase();
								}
								if (row26.to == null) {
									new_tUniqRow_7.to = null;
								} else {
									new_tUniqRow_7.to = row26.to.toLowerCase();
								}

								keystUniqRow_7.add(new_tUniqRow_7);
								if (row27 == null) {
									row27 = new row27Struct();
								}
								row27.from = row26.from;
								row27.type = row26.type;
								row27.to = row26.to;
								nb_uniques_tUniqRow_7++;
							} else {
								nb_duplicates_tUniqRow_7++;
							}

							tos_count_tUniqRow_7++;

							/**
							 * [tUniqRow_7 main ] stop
							 */
							// Start of branch "row27"
							if (row27 != null) {

								/**
								 * [tLogRow_14 main ] start
								 */

								currentComponent = "tLogRow_14";

								row28 = row27;

								tos_count_tLogRow_14++;

								/**
								 * [tLogRow_14 main ] stop
								 */

								/**
								 * [tNeo4jOutputRelationship_6 main ] start
								 */

								currentComponent = "tNeo4jOutputRelationship_6";

								{
									org.neo4j.graphdb.Node startNode_tNeo4jOutputRelationship_6 = startIndexNode_tNeo4jOutputRelationship_6
											.get("name", row28.from)
											.getSingle();
									org.neo4j.graphdb.Node endNode_tNeo4jOutputRelationship_6 = endIndexNode_tNeo4jOutputRelationship_6
											.get("name", row28.to).getSingle();
									if (startNode_tNeo4jOutputRelationship_6 == null) {
										throw new RuntimeException(
												"Start node looked up by index with "
														+ "name"
														+ " as key and "
														+ row28.from
														+ " as value doesn't exist");
									}
									if (endNode_tNeo4jOutputRelationship_6 == null) {
										throw new RuntimeException(
												"End node looked up by index with "
														+ "name"
														+ " as key and "
														+ row28.from
														+ " as value doesn't exist");
									}

									org.neo4j.graphdb.Relationship relationship_tNeo4jOutputRelationship_6 = startNode_tNeo4jOutputRelationship_6
											.createRelationshipTo(
													endNode_tNeo4jOutputRelationship_6,
													relationshipType_tNeo4jOutputRelationship_6);

								}

								counter_tNeo4jOutputRelationship_6++;

								if (counter_tNeo4jOutputRelationship_6
										% Long.parseLong("30000") == 0) {
									tx_tNeo4jOutputRelationship_6.success();
									tx_tNeo4jOutputRelationship_6.finish();
									tx_tNeo4jOutputRelationship_6 = databaseService_tNeo4jOutputRelationship_6
											.beginTx();
								}

								nb_line_tNeo4jOutputRelationship_6++;

								tos_count_tNeo4jOutputRelationship_6++;

								/**
								 * [tNeo4jOutputRelationship_6 main ] stop
								 */

							} // End of branch "row27"

						} // End of branch "row25"

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

					}
				} finally {
					if (!((Object) ("/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm CREATES rels.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_8 != null) {
							fid_tFileInputDelimited_8.close();
						}
					}
					if (fid_tFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								fid_tFileInputDelimited_8.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tLogRow_13 end ] start
				 */

				currentComponent = "tLogRow_13";

				ok_Hash.put("tLogRow_13", true);
				end_Hash.put("tLogRow_13", System.currentTimeMillis());

				/**
				 * [tLogRow_13 end ] stop
				 */

				/**
				 * [tUniqRow_7 end ] start
				 */

				currentComponent = "tUniqRow_7";

				globalMap.put("tUniqRow_7_NB_UNIQUES", nb_uniques_tUniqRow_7);
				globalMap.put("tUniqRow_7_NB_DUPLICATES",
						nb_duplicates_tUniqRow_7);

				ok_Hash.put("tUniqRow_7", true);
				end_Hash.put("tUniqRow_7", System.currentTimeMillis());

				/**
				 * [tUniqRow_7 end ] stop
				 */

				/**
				 * [tLogRow_14 end ] start
				 */

				currentComponent = "tLogRow_14";

				ok_Hash.put("tLogRow_14", true);
				end_Hash.put("tLogRow_14", System.currentTimeMillis());

				/**
				 * [tLogRow_14 end ] stop
				 */

				/**
				 * [tNeo4jOutputRelationship_6 end ] start
				 */

				currentComponent = "tNeo4jOutputRelationship_6";

				tx_tNeo4jOutputRelationship_6.success();
				tx_tNeo4jOutputRelationship_6.finish();

				globalMap.put("tNeo4jOutputRelationship_6_NB_LINE",
						nb_line_tNeo4jOutputRelationship_6);

				ok_Hash.put("tNeo4jOutputRelationship_6", true);
				end_Hash.put("tNeo4jOutputRelationship_6",
						System.currentTimeMillis());

				/**
				 * [tNeo4jOutputRelationship_6 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_8:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileInputDelimited_9Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];
		static byte[] commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[0];

		public String from;

		public String getFrom() {
			return this.from;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String to;

		public String getTo() {
			return this.to;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length) {
					if (length < 1024
							&& commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded.length == 0) {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[1024];
					} else {
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length);
				strReturn = new String(
						commonByteArray_RIXTESTTALENDPROJECT_LastFMimportembedded,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RIXTESTTALENDPROJECT_LastFMimportembedded) {

				try {

					int length = 0;

					this.from = readString(dis);

					this.type = readString(dis);

					this.to = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.from, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.to, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("from=" + from);
			sb.append(",type=" + type);
			sb.append(",to=" + to);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row29Struct row29 = new row29Struct();
				row29Struct row30 = row29;
				row31Struct row31 = new row31Struct();
				row31Struct row32 = row31;

				/**
				 * [tNeo4jOutputRelationship_7 begin ] start
				 */

				ok_Hash.put("tNeo4jOutputRelationship_7", false);
				start_Hash.put("tNeo4jOutputRelationship_7",
						System.currentTimeMillis());
				currentComponent = "tNeo4jOutputRelationship_7";

				int tos_count_tNeo4jOutputRelationship_7 = 0;
				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jOutputRelationship_7 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> startIndexNode_tNeo4jOutputRelationship_7 = databaseService_tNeo4jOutputRelationship_7
						.index().forNodes("node_auto_index");
				org.neo4j.graphdb.index.Index<org.neo4j.graphdb.Node> endIndexNode_tNeo4jOutputRelationship_7 = databaseService_tNeo4jOutputRelationship_7
						.index().forNodes("node_auto_index");

				org.neo4j.graphdb.RelationshipType relationshipType_tNeo4jOutputRelationship_7 = org.neo4j.graphdb.DynamicRelationshipType
						.withName("APPEARS_ON");

				org.neo4j.graphdb.Transaction tx_tNeo4jOutputRelationship_7 = databaseService_tNeo4jOutputRelationship_7
						.beginTx();
				int nb_line_tNeo4jOutputRelationship_7 = 0;
				long counter_tNeo4jOutputRelationship_7 = 0;

				/**
				 * [tNeo4jOutputRelationship_7 begin ] stop
				 */

				/**
				 * [tLogRow_16 begin ] start
				 */

				ok_Hash.put("tLogRow_16", false);
				start_Hash.put("tLogRow_16", System.currentTimeMillis());
				currentComponent = "tLogRow_16";

				int tos_count_tLogRow_16 = 0;

				/**
				 * [tLogRow_16 begin ] stop
				 */

				/**
				 * [tUniqRow_8 begin ] start
				 */

				ok_Hash.put("tUniqRow_8", false);
				start_Hash.put("tUniqRow_8", System.currentTimeMillis());
				currentComponent = "tUniqRow_8";

				int tos_count_tUniqRow_8 = 0;

				class KeyStruct_tUniqRow_8 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String from;
					String type;
					String to;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime
									* result
									+ ((this.from == null) ? 0 : this.from
											.hashCode());

							result = prime
									* result
									+ ((this.type == null) ? 0 : this.type
											.hashCode());

							result = prime
									* result
									+ ((this.to == null) ? 0 : this.to
											.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;

						if (this.from == null) {
							if (other.from != null)
								return false;
						} else if (!this.from.equals(other.from))
							return false;

						if (this.type == null) {
							if (other.type != null)
								return false;
						} else if (!this.type.equals(other.type))
							return false;

						if (this.to == null) {
							if (other.to != null)
								return false;
						} else if (!this.to.equals(other.to))
							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_8 = 0;
				int nb_duplicates_tUniqRow_8 = 0;
				KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
				java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>();

				/**
				 * [tUniqRow_8 begin ] stop
				 */

				/**
				 * [tLogRow_15 begin ] start
				 */

				ok_Hash.put("tLogRow_15", false);
				start_Hash.put("tLogRow_15", System.currentTimeMillis());
				currentComponent = "tLogRow_15";

				int tos_count_tLogRow_15 = 0;

				/**
				 * [tLogRow_15 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());
				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				try {

					Object filename_tFileInputDelimited_9 = "/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm APPEARS_ON rels.csv";
					if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
						if (footer_value_tFileInputDelimited_9 > 0
								|| random_value_tFileInputDelimited_9 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(
								"/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm APPEARS_ON rels.csv",
								"ISO-8859-15", ";", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_9 != null
							&& fid_tFileInputDelimited_9.nextRecord()) {

						row29 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row29 = new row29Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_9 = 0;

							columnIndexWithD_tFileInputDelimited_9 = 0;

							row29.from = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 1;

							row29.type = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

							columnIndexWithD_tFileInputDelimited_9 = 2;

							row29.to = fid_tFileInputDelimited_9
									.get(columnIndexWithD_tFileInputDelimited_9);

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row29 = null;

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */
						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */
						// Start of branch "row29"
						if (row29 != null) {

							/**
							 * [tLogRow_15 main ] start
							 */

							currentComponent = "tLogRow_15";

							row30 = row29;

							tos_count_tLogRow_15++;

							/**
							 * [tLogRow_15 main ] stop
							 */

							/**
							 * [tUniqRow_8 main ] start
							 */

							currentComponent = "tUniqRow_8";

							row31 = null;
							if (row30.from == null) {
								finder_tUniqRow_8.from = null;
							} else {
								finder_tUniqRow_8.from = row30.from
										.toLowerCase();
							}
							if (row30.type == null) {
								finder_tUniqRow_8.type = null;
							} else {
								finder_tUniqRow_8.type = row30.type
										.toLowerCase();
							}
							if (row30.to == null) {
								finder_tUniqRow_8.to = null;
							} else {
								finder_tUniqRow_8.to = row30.to.toLowerCase();
							}
							finder_tUniqRow_8.hashCodeDirty = true;
							if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
								KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

								if (row30.from == null) {
									new_tUniqRow_8.from = null;
								} else {
									new_tUniqRow_8.from = row30.from
											.toLowerCase();
								}
								if (row30.type == null) {
									new_tUniqRow_8.type = null;
								} else {
									new_tUniqRow_8.type = row30.type
											.toLowerCase();
								}
								if (row30.to == null) {
									new_tUniqRow_8.to = null;
								} else {
									new_tUniqRow_8.to = row30.to.toLowerCase();
								}

								keystUniqRow_8.add(new_tUniqRow_8);
								if (row31 == null) {
									row31 = new row31Struct();
								}
								row31.from = row30.from;
								row31.type = row30.type;
								row31.to = row30.to;
								nb_uniques_tUniqRow_8++;
							} else {
								nb_duplicates_tUniqRow_8++;
							}

							tos_count_tUniqRow_8++;

							/**
							 * [tUniqRow_8 main ] stop
							 */
							// Start of branch "row31"
							if (row31 != null) {

								/**
								 * [tLogRow_16 main ] start
								 */

								currentComponent = "tLogRow_16";

								row32 = row31;

								tos_count_tLogRow_16++;

								/**
								 * [tLogRow_16 main ] stop
								 */

								/**
								 * [tNeo4jOutputRelationship_7 main ] start
								 */

								currentComponent = "tNeo4jOutputRelationship_7";

								{
									org.neo4j.graphdb.Node startNode_tNeo4jOutputRelationship_7 = startIndexNode_tNeo4jOutputRelationship_7
											.get("name", row32.from)
											.getSingle();
									org.neo4j.graphdb.Node endNode_tNeo4jOutputRelationship_7 = endIndexNode_tNeo4jOutputRelationship_7
											.get("name", row32.to).getSingle();
									if (startNode_tNeo4jOutputRelationship_7 == null) {
										throw new RuntimeException(
												"Start node looked up by index with "
														+ "name"
														+ " as key and "
														+ row32.from
														+ " as value doesn't exist");
									}
									if (endNode_tNeo4jOutputRelationship_7 == null) {
										throw new RuntimeException(
												"End node looked up by index with "
														+ "name"
														+ " as key and "
														+ row32.from
														+ " as value doesn't exist");
									}

									org.neo4j.graphdb.Relationship relationship_tNeo4jOutputRelationship_7 = startNode_tNeo4jOutputRelationship_7
											.createRelationshipTo(
													endNode_tNeo4jOutputRelationship_7,
													relationshipType_tNeo4jOutputRelationship_7);

								}

								counter_tNeo4jOutputRelationship_7++;

								if (counter_tNeo4jOutputRelationship_7
										% Long.parseLong("30000") == 0) {
									tx_tNeo4jOutputRelationship_7.success();
									tx_tNeo4jOutputRelationship_7.finish();
									tx_tNeo4jOutputRelationship_7 = databaseService_tNeo4jOutputRelationship_7
											.beginTx();
								}

								nb_line_tNeo4jOutputRelationship_7++;

								tos_count_tNeo4jOutputRelationship_7++;

								/**
								 * [tNeo4jOutputRelationship_7 main ] stop
								 */

							} // End of branch "row31"

						} // End of branch "row29"

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

					}
				} finally {
					if (!((Object) ("/Users/rvanbruggen/Cloud/Neo Technology/Demo/Last.fm/20130711 last.fm APPEARS_ON rels.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_9 != null) {
							fid_tFileInputDelimited_9.close();
						}
					}
					if (fid_tFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE",
								fid_tFileInputDelimited_9.getRowNumber());
					}
				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tLogRow_15 end ] start
				 */

				currentComponent = "tLogRow_15";

				ok_Hash.put("tLogRow_15", true);
				end_Hash.put("tLogRow_15", System.currentTimeMillis());

				/**
				 * [tLogRow_15 end ] stop
				 */

				/**
				 * [tUniqRow_8 end ] start
				 */

				currentComponent = "tUniqRow_8";

				globalMap.put("tUniqRow_8_NB_UNIQUES", nb_uniques_tUniqRow_8);
				globalMap.put("tUniqRow_8_NB_DUPLICATES",
						nb_duplicates_tUniqRow_8);

				ok_Hash.put("tUniqRow_8", true);
				end_Hash.put("tUniqRow_8", System.currentTimeMillis());

				/**
				 * [tUniqRow_8 end ] stop
				 */

				/**
				 * [tLogRow_16 end ] start
				 */

				currentComponent = "tLogRow_16";

				ok_Hash.put("tLogRow_16", true);
				end_Hash.put("tLogRow_16", System.currentTimeMillis());

				/**
				 * [tLogRow_16 end ] stop
				 */

				/**
				 * [tNeo4jOutputRelationship_7 end ] start
				 */

				currentComponent = "tNeo4jOutputRelationship_7";

				tx_tNeo4jOutputRelationship_7.success();
				tx_tNeo4jOutputRelationship_7.finish();

				globalMap.put("tNeo4jOutputRelationship_7_NB_LINE",
						nb_line_tNeo4jOutputRelationship_7);

				ok_Hash.put("tNeo4jOutputRelationship_7", true);
				end_Hash.put("tNeo4jOutputRelationship_7",
						System.currentTimeMillis());

				/**
				 * [tNeo4jOutputRelationship_7 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_9:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tNeo4jClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public void tNeo4jClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tNeo4jClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		int iterateLoop = 0;
		String currentComponent = "";

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tNeo4jClose_1 begin ] start
				 */

				ok_Hash.put("tNeo4jClose_1", false);
				start_Hash.put("tNeo4jClose_1", System.currentTimeMillis());
				currentComponent = "tNeo4jClose_1";

				int tos_count_tNeo4jClose_1 = 0;

				/**
				 * [tNeo4jClose_1 begin ] stop
				 */
				/**
				 * [tNeo4jClose_1 main ] start
				 */

				currentComponent = "tNeo4jClose_1";

				tos_count_tNeo4jClose_1++;

				/**
				 * [tNeo4jClose_1 main ] stop
				 */
				/**
				 * [tNeo4jClose_1 end ] start
				 */

				currentComponent = "tNeo4jClose_1";

				org.neo4j.graphdb.GraphDatabaseService databaseService_tNeo4jClose_1 = (org.neo4j.graphdb.GraphDatabaseService) globalMap
						.get("dbService_tNeo4jConnection_1");

				if (databaseService_tNeo4jClose_1 != null) {
					databaseService_tNeo4jClose_1.shutdown();
				}

				ok_Hash.put("tNeo4jClose_1", true);
				end_Hash.put("tNeo4jClose_1", System.currentTimeMillis());

				/**
				 * [tNeo4jClose_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tNeo4jClose_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final LastFMimportembedded LastFMimportembeddedClass = new LastFMimportembedded();

		int exitCode = LastFMimportembeddedClass.runJobInTOS(args);
		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = LastFMimportembedded.class
					.getClassLoader().getResourceAsStream(
							"rixtesttalendproject/lastfmimportembedded_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tNeo4jConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tNeo4jConnection_1) {

			e_tNeo4jConnection_1.printStackTrace();
			globalMap.put("tNeo4jConnection_1_SUBPROCESS_STATE", -1);

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : LastFMimportembedded");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 261146 characters generated by Talend Open Studio for Big Data on the July
 * 13, 2013 8:50:31 AM CEST
 ************************************************************************************************/
